#include <stdio.h>
#pragma warning(disable : 4996)
#define NUM 100

/*
주식의 가격을 저장하는 배열 구조체를 stoke라는 이름으로 설정한다.
*/
struct stoke {

	int stokePrice[NUM];
};

/*
입력한 연도와 달, 일을 입력받은 정보들을 저장할 배열 구조체를 date라는 이름으로 설정한다
*/
struct date {

	int year[NUM];
	int month[NUM];
	int day[NUM];
};

/*
입력한 정보들 중에서 지정한 기간들 사이의 최대값을 구하는  함수를 포인터로 설정한다. 
함수에 맞춰서 반환하는 최대값 max도 포인터 변수로 설정해주고 초기 설정값으로 지정된 기간
들 중에 가장 먼저 입려된 numA순서에 있는 값을 넣어준다. numA부터 numB까지 돌 동안 max값이
배열 요소 하나하나 비교하면서 더 큰 값을 max에 저장해 반환한다.
*/
int* max_price(struct stoke f1[], struct date f2[], int numA, int numB) {

	int* max;
	max = f1[numA].stokePrice;

	for (int i = numA; i <= numB; i++)
	{

		if (*max < *f1[i].stokePrice)
		{
			max = f1[i].stokePrice;
		}
	}

	return max;
}

/*
입력한 정보들 중에서 지정한 기간들 사이의 최소값을 구하는  함수를 포인터로 설정한다.
함수에 맞춰서 반환하는 최소값 mㅑㅜ도 포인터 변수로 설정해주고 초기 설정값으로 지정된 기간
들 중에 가장 먼저 입력된 numA순서에 있는 값을 넣어준다. numA부터 numB까지 돌 동안 min값이
배열 요소 하나하나 비교하면서 더 작은 값을 min에 저장해 반환한다.
*/
int* min_price(struct stoke f1[], struct date f2[], int numA, int numB)
{
	int* min;
	min = f1[numA].stokePrice;

	for (int i = numA; i <= numB; i++)
	{
		if (*min > * f1[i].stokePrice)
		{
			min = f1[i].stokePrice;
		}
	}

	return min;
}

/*
입력된 정보들의 값을 numA부터 numB까지 돌면서 sum 변수에 저장하고
저장된 값을 지정된 기간의 수인 total변수로 나눈 평균값을 리턴한다.
*/
float avg(struct stoke f1[], int numA, int numB)
{
	float  sum = 0;
	float total = (numB - numA) + 1;
	for (int i = numA; i <= numB; i++)
	{
		sum += (*f1[i].stokePrice);
	}

	float avgPrice = (sum / total);

	return avgPrice;
}

/*
입력된 정보들 중에서 지정된 기간동안 값이 증가한 경우 count변수 값을 증가해주고 아닌 경우
그동안 증가한 count값을 배열 maxIncrease에 넣어주고 count를 다시 0으로 초기화 시켜준다.
또한 지정된 기간동안 값이 꾸준히 오른 경우도 있을 것이므로 지정된 기간동안 count값이 계속 
증가했다면 for문이 끝나고 그 값을 배열에 저장해준다. 저장된 배열에서 위에 최대값을 구하는
원리와 똑같은 방식으로 최대로 많이 증가한 횟수를 max변수에 저장해 리턴해준다.
*/
int increase(struct stoke f1[], int numA, int numB)
{
	int count = 0;
	int price = 0;
	int j = 0;
	int maxIncrease[NUM];
	for (int i = numA; i < numB; i++)
	{
		if ((*f1[i+1].stokePrice) > (*f1[i].stokePrice)) {
			count++;
		}
		else {
			maxIncrease[j] = count;
			count = 0;
			j++;
		}
	}
	maxIncrease[j] = count;

	int max = maxIncrease[0];
	for (int i = 1; i < j; i++) {
		if (max < maxIncrease[i]) {
			max = maxIncrease[i];
		}
	}

	return max;
}


int main()

{
	int num;
	scanf("%d", &num);

	struct stoke stu[NUM];
	struct date f1[NUM];
	int dueAYear, dueAmonth, dueADay, dueBYear, dueBmonth, dueBDay;

	for (int i = 0; i < num; i++)

	{
		scanf("%d %d %d %d", f1[i].year, f1[i].month, f1[i].day, stu[i].stokePrice);

	}

	scanf("%d %d %d %d %d %d", &dueAYear, &dueAmonth, &dueADay, &dueBYear, &dueBmonth, &dueBDay);

	/*
	지정된 기간이 날짜를 저장한 구조체 변수와 같은 값을 가지고 있는 순간을 만나면
	그 값을 under변수에 저장한다.
	*/
	int under;
	for (int i = 0; i < num; i++)
	{
		long year = *f1[i].year;
		long month = *f1[i].month;
		long day = *f1[i].day;
		if (year == dueAYear && month == dueAmonth && day == dueADay)
			under = i;
	}

	/*
	지정된 기간이 날짜를 저장한 구조체 변수와 같은 값을 가지고 있는 순간을 만나면
	그 값을 up변수에 저장한다.
	*/
	int up;
	for (int i = 0; i < num; i++)
	{
		long year = *f1[i].year;
		long month = *f1[i].month;
		long day = *f1[i].day;
		if (year == dueBYear && month == dueBmonth && day == dueBDay)
			up = i;
	}

	//최대 최소 출력
	int max = *max_price(stu, f1, under, up);
	int min = *min_price(stu, f1, under, up);
	printf("%d ", max);
	printf("%d ", min);

	//평균 출력
	float avgPrice = avg(stu, under, up);
	printf("%.1lf ", avgPrice);

	//최대 증가 횟수 출력
	int increaseTime = increase(stu, under, up);
	printf("%d\n", increaseTime);


	return 0;
}
